/*
 * Copyright 2017 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
  repositories {
    jcenter()
    maven { url "http://spinnaker.bintray.com/gradle" }
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath "com.netflix.spinnaker.gradle:spinnaker-gradle-project:3.16.0"
    classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE"
    classpath "org.junit.platform:junit-platform-gradle-plugin:1.0.0"
    classpath "com.netflix.nebula:nebula-kotlin-plugin:$kotlinVersion"
    classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.15"
    classpath "com.netflix.nebula:gradle-dependency-lock-plugin:4.9.5"
  }
}

allprojects {
  apply plugin: "spinnaker.project"
  apply plugin: "nebula.dependency-lock"

  group = "com.netflix.spinnaker.swabbie"

  ext {
    spinnakerDependenciesVersion = project.hasProperty('spinnakerDependenciesVersion') ? project.property('spinnakerDependenciesVersion') : '1.6.0'
  }

  def checkLocalVersions = [spinnakerDependenciesVersion: spinnakerDependenciesVersion]
  if (ext.has('versions')) {
    def extVers = ext.get('versions')
    if (extVers instanceof Map) {
      checkLocalVersions.putAll(extVers)
    }
  }

  def localVersions = checkLocalVersions.findAll { it.value.endsWith('-SNAPSHOT') }
  if (localVersions) {
    logger.info("Enabling mavenLocal repo for $localVersions")
    repositories {
      mavenLocal()
    }
  }

  spinnaker {
    dependenciesVersion = spinnakerDependenciesVersion
  }

  configurations.all {
    exclude group: "javax.servlet", module: "servlet-api"
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "org.slf4j", module: "slf4j-simple"
  }
}

subprojects {
  apply from: "$rootDir/gradle/kotlin.gradle"
  apply from: "$rootDir/gradle/junit5.gradle"
  apply from: "$rootDir/gradle/license.gradle"
  apply from: "$rootDir/gradle/dokka.gradle"

  repositories {
    jcenter()
  }


  test {
    testLogging {
      exceptionFormat = "full"
    }
  }
}

