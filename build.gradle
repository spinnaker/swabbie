/*
 * Copyright 2017 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
  repositories {
    jcenter()
    maven { url "https://spinnaker.bintray.com/gradle" }
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath "com.netflix.spinnaker.gradle:spinnaker-dev-plugin:$spinnakerGradleVersion"
    if (Boolean.valueOf(enablePublishing)) {
      classpath "com.netflix.spinnaker.gradle:spinnaker-gradle-project:$spinnakerGradleVersion"
    }
  }
}

plugins {
  id("nebula.kotlin") version "1.3.31" apply false
  id("org.jetbrains.dokka") version "0.9.18" apply false
}

allprojects {
  apply plugin: "spinnaker.base-project"
  if (Boolean.valueOf(enablePublishing)) {
    apply plugin: "spinnaker.project"
  }

  if (korkVersion.endsWith("-SNAPSHOT")) {
    repositories {
      mavenLocal()
    }
  }

  group = "com.netflix.spinnaker.swabbie"

  configurations.all {
    exclude group: "javax.servlet", module: "servlet-api"
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "org.slf4j", module: "slf4j-simple"
  }
}

subprojects {
  if (name != "swabbie-bom") {
    apply plugin: "java"
    apply from: "$rootDir/gradle/kotlin.gradle"
    apply from: "$rootDir/gradle/junit5.gradle"
    apply from: "$rootDir/gradle/license.gradle"
    apply from: "$rootDir/gradle/dokka.gradle"

    repositories {
      jcenter()
    }

    dependencies {
      api(platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion"))
    }

    test {
      testLogging {
        exceptionFormat = "full"
        events 'PASSED', 'FAILED', 'SKIPPED'
      }
      afterSuite { desc, result ->
        if (!desc.parent) {
          println "\nTest result: ${result.resultType}"
          println "Test summary: ${result.testCount} tests, " +
            "${result.successfulTestCount} succeeded, " +
            "${result.failedTestCount} failed, " +
            "${result.skippedTestCount} skipped"
        }
      }
    }
  }
}
